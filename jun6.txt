package com.java8dateandtime;
 
import java.time.*;
 
 
// joda.org ->Joda Time API
public class Example1 {
 
	public static void main(String[] args) {
		/*
		LocalDate date=LocalDate.now();
		System.out.println(date);
		
		LocalTime time=LocalTime.now();
		System.out.println(time);
		*/
		
		//LocalDate
		/*
		LocalDate date=LocalDate.now();
		System.out.println(date);
		int day=date.getDayOfMonth();
		int month=date.getMonthValue();
		int year=date.getYear();
		
		System.out.println(day+"-"+month+"-"+year);
		System.out.printf("%d-%d-%d",day,month,year);
		
		*/
		
		//LocalTime
		LocalTime time=LocalTime.now();
		//System.out.println(time);
		int hour=time.getHour();
		int min=time.getMinute();
		int sec=time.getSecond();
		int nanos=time.getNano();
		
		System.out.printf("%d:%d:%d:%d",hour,min,sec,nanos);
		
		
	}
 
}
 
aaaaa by Maria (Unverified)
Maria (Unverified)
10:49 AM
aaaaa
package com.java8dateandtime;   import java... by Maria (Unverified)
Maria (Unverified)
10:49 AM
package com.java8dateandtime;
 
import java.time.LocalDateTime;
import java.time.Month;
 
public class Example2 {
	public static void main(String[] args) {
		LocalDateTime dt=LocalDateTime.now();
		//System.out.println(dt);
		int d=dt.getDayOfMonth();
		int m=dt.getMonthValue();
		int y=dt.getYear();
		//System.out.printf("%d-%d-%d",d,m,y);
		//System.out.println();
		int h=dt.getHour();
		int mi=dt.getMinute();
		int s=dt.getSecond();
		int n=dt.getNano();
		//System.out.printf("%d:%d:%d:%d",h,mi,s,n);
		//LocalDateTime.of(yy,mm,dd,h,m,s,n);
		LocalDateTime dt1=LocalDateTime.of(1993,Month.JUNE,03,8,32);
		System.out.println("After 6 months "+dt1.plusMonths(5));
		System.out.println("After 6 months "+dt1.minusMonths(5));
}
}

bbbb by Maria (Unverified)
Maria (Unverified)
10:49 AM
bbbb
package com.java8dateandtime;   import java... by Maria (Unverified)
Maria (Unverified)
10:50 AM
package com.java8dateandtime;
 
import java.time.LocalDate;
import java.time.Period;
 
public class Example3 {
 
	public static void main(String[] args) {
		LocalDate birthday=LocalDate.of(2001, 6, 13);
		LocalDate currentdate=LocalDate.now();
	Period p=Period.between(birthday, currentdate);
System.out.printf("Your age is %d years %d months and % days",p.getYears(),p.getMonths(),p.getDays());
	}
 
}
 
// Explore the Year class as well

cccc by Maria (Unverified)
Maria (Unverified)
10:50 AM
cccc
package com.java8dateandtime;   import java... by Maria (Unverified)
Maria (Unverified)
10:50 AM
package com.java8dateandtime;
 
import java.time.ZoneId;
import java.time.ZonedDateTime;
 
public class Example4 {
public static void main(String[] args) {
	ZoneId zone=ZoneId.systemDefault();
	System.out.println(zone);
	ZoneId ame =ZoneId.of("Asia/Calcutta");
	ZonedDateTime ztamer=ZonedDateTime.now(ame);
	System.out.println(ztamer);
}
}
/*
LocalDate
LocalTime
LocalDateTime
Period
Year
TemporalAdjusters / TemporalAdjuster
ZoneId
ZonedDateTime
 
 
*/
ddd by Maria (Unverified)
Maria (Unverified)
10:50 AM
ddd
package com.java8dateandtime;   import java... by Maria (Unverified)
Maria (Unverified)
10:50 AM
package com.java8dateandtime;
 
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.temporal.TemporalAdjusters;
 
public class TemporalAdjusterExample {
	public static void main(String[] args) {
        LocalDate today = LocalDate.now();
        System.out.println("Today: " + today);
 
        // Find the first day of the current month
        LocalDate firstDayOfMonth = today.with(TemporalAdjusters.firstDayOfMonth());
        System.out.println("First day of this month: " + firstDayOfMonth);
 
        // Find the next Monday
        LocalDate nextMonday = today.with(TemporalAdjusters.next(DayOfWeek.MONDAY));
        System.out.println("Next Monday: " + nextMonday);
 
        // Find the last day of the current month
        LocalDate lastDayOfMonth = today.with(TemporalAdjusters.lastDayOfMonth());
        System.out.println("Last day of this month: " + lastDayOfMonth);
    }
}
/*
 
TemporalAdjusters.firstDayOfMonth()
TemporalAdjusters.lastDayOfMonth()
TemporalAdjusters.firstDayOfNextMonth()
TemporalAdjusters.firstInMonth(DayOfWeek dayOfWeek)
TemporalAdjusters.next(DayOfWeek dayOfWeek)
TemporalAdjusters.previous(DayOfWeek dayOfWeek)
 
 
*/


Task 6: Java 8 Date and Time API
Write a program that calculates the number of days between two dates input by the user."


Task 7: Timezone
Create a timezone converter that takes a time in one timezone and converts it to another timezone.

Implement LocalDate LocalTime LocalDateTim... by Maria (Unverified)
Maria (Unverified)
10:53 AM
Implement LocalDate
LocalTime
LocalDateTime
Period
TemporalAdjusters / TemporalAdjuster
ZoneId
ZonedDateTime
has context menu


has context menu





import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;

public class DaysBetweenDates {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt for dates
        System.out.print("Enter first date (YYYY-MM-DD): ");
        String firstDateString = scanner.nextLine();
        System.out.print("Enter second date (YYYY-MM-DD): ");
        String secondDateString = scanner.nextLine();

        // Parse dates
        LocalDate firstDate = LocalDate.parse(firstDateString, DateTimeFormatter.ISO_DATE);
        LocalDate secondDate = LocalDate.parse(secondDateString, DateTimeFormatter.ISO_DATE);

        // Calculate difference in days
        long daysBetween = ChronoUnit.DAYS.between(firstDate, secondDate);

        // Print result
        System.out.println("Number of days between " + firstDateString + " and " + secondDateString + ": " + daysBetween);
    }
}





import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;

public class TimezoneConverter {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");

        // Prompt the user to enter the time
        System.out.print("Enter the time (yyyy-MM-dd HH:mm): ");
        String timeString = scanner.nextLine();

        // Prompt the user to enter the source timezone
        System.out.print("Enter the source timezone (e.g., America/New_York): ");
        String sourceTimezone = scanner.nextLine();

        // Prompt the user to enter the target timezone
        System.out.print("Enter the target timezone (e.g., Europe/London): ");
        String targetTimezone = scanner.nextLine();

        // Parse the input time
        LocalDateTime localDateTime = LocalDateTime.parse(timeString, formatter);

        // Apply the source timezone
        ZoneId sourceZoneId = ZoneId.of(sourceTimezone);
        ZonedDateTime sourceZonedDateTime = ZonedDateTime.of(localDateTime, sourceZoneId);

        // Convert to the target timezone
        ZoneId targetZoneId = ZoneId.of(targetTimezone);
        ZonedDateTime targetZonedDateTime = sourceZonedDateTime.withZoneSameInstant(targetZoneId);

        // Output the result
        System.out.println("Time in " + targetTimezone + ": " + targetZonedDateTime.format(formatter));
    }
}










create database wipro_test;
use wipro_test;
create table employees(id int,first_name varchar(100),last_name varchar(100), age int);
create table user(id int, username varchar(100), email varchar(100), status varchar(100));
 
select * from user;
select * from employees;
 
truncate table user;
truncate table employees;

has context menu









package com.jdbc;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
 
public class JDBCConnect {
 
// JDBC URL, username, and password of MySQL server
static final String JDBC_URL ="jdbc:mysql://localhost:3306/wipro_test";
static final String USERNAME = "root";
static final String PASSWORD = "root@1234";
 
 
public static void main(String[] args) {
 
	try {
		Class.forName("com.mysql.cj.jdbc.Driver");
		} 
	catch (ClassNotFoundException e) {
		e.printStackTrace();
		return;
		}
		// Step 1: Establish a connection
		try (Connection connection =DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD)) 
		{
		// Step 2: Create a Statement
		try (Statement statement = connection.createStatement())
		{
		// Step 3: Create (Insert)
		insertData(statement, 3, "Manyam", "Vinay", 24);
		// Step 4: Read (Retrieve)
		retrieveData(statement);
		// Step 5: Update (Modify)
		updateData(statement, 1, 31);
		// Step 6: Read (Retrieve) after update
		retrieveData(statement);
		// Step 7: Delete (Remove)
		deleteData(statement, 3);
		// Step 8: Read (Retrieve) after delete
	retrieveData(statement);
		} 
		catch (SQLException e) {
		e.printStackTrace();
		}
 
 
} catch (SQLException e) {
// TODO Auto-generated catch block
e.printStackTrace();
}
		}
 
// Method to insert data into the table
private static void insertData(Statement statement, int id,String firstName, String lastName, int age) throws SQLException {
String insertQuery = "INSERT INTO employees (id, first_name,last_name, age) VALUES (" + id + ", '" + firstName + "', '" + lastName+ "', " + age + ")";
statement.executeUpdate(insertQuery);
System.out.println("Data inserted successfully.");
}
 
 
// Method to retrieve data from the table
private static void retrieveData(Statement statement) throws SQLException {
String selectQuery = "SELECT * FROM employees";
try (ResultSet resultSet = statement.executeQuery(selectQuery)){
System.out.println("Employee data:");
while (resultSet.next()) 
{
System.out.println("ID: " + resultSet.getInt("id")+", Name: " + resultSet.getString("first_name")+ " " + resultSet.getString("last_name") +
", Age: " + resultSet.getInt("age"));
}
System.out.println();
}}
 
 
// Method to update data in the  table
private static void updateData(Statement statement, int id,int newAge) throws SQLException {
	String updateQuery = "UPDATE employees SET age = " + newAge+" WHERE id = " + id;
	statement.executeUpdate(updateQuery);
	System.out.println("Data updated successfully.");
	}
	// Method to delete data from the table
	private static void deleteData(Statement statement, int id) throws SQLException {
	String deleteQuery = "DELETE FROM employees WHERE id = "+id;
	statement.executeUpdate(deleteQuery);
	System.out.println("Data deleted successfully.");
	}}

Task 1: Establishing Database Connections ... by Maria (Unverified)
Maria (Unverified)
3:50 PM
Task 1: Establishing Database Connections
Write a Java program that connects to a MySql database and prints out the connection object to confirm successful connection.
 
Task 2: SQL Queries using JDBC
Create a table 'User' with a following schema 'User ID' and 'Password' stored as hash format (note you have research on how to generate hash from a string), accept "User ID" and "Password" as input and check in the table if they match to confirm whether user access is allowed or not.
 
Task 3: PreparedStatement
Modify the SELECT query program to use PreparedStatement to parameterize the query and prevent SQL injection.

requires java.sql; by Maria (Unverified)
Maria (Unverified)
3:53 PM
requires java.sql;
has context menu













package com.jdbc;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
 
public class JDBCUsingPreparedStatement {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/wipro_test";
        String username = "root";
        String password = "root@1234";
 
        try {
            // Load the JDBC driver (for MySQL)
            Class.forName("com.mysql.cj.jdbc.Driver");
 
            // Establish the connection
            Connection connection = DriverManager.getConnection(url, username, password);
 
            // Use PreparedStatement
            usePreparedStatement(connection);
 
            // Close the connection
            connection.close();
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }
 
    private static void usePreparedStatement(Connection connection) throws SQLException {
        String sql = "SELECT * FROM user WHERE username = ? AND status = ?";
        // Create a PreparedStatement
        PreparedStatement preparedStatement = connection.prepareStatement(sql);
        // Set the parameters
        preparedStatement.setString(1, "john_doe"); // Set username
        preparedStatement.setString(2, "active");   // Set status
 
        // Execute the query
        ResultSet resultSet = preparedStatement.executeQuery();
 
        // Process the result set
        while (resultSet.next()) {
            int id = resultSet.getInt("id");
            String username = resultSet.getString("username");
            String email = resultSet.getString("email");
            String status = resultSet.getString("status");
 
            // Print the data
            System.out.println("ID: " + id + ", Username: " + username + ", Email: " + email + ", Status: " + status);
        }
 
        // Close the ResultSet and PreparedStatement
        resultSet.close();
        preparedStatement.close();
    }
}

aaaa by Maria (Unverified)
Maria (Unverified)
5:24 PM
aaaa
has context menu




package com.jdbc;
 
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
 
public class DatabaseMetaDataExample {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/wipro_test";
        String username = "root";
        String password = "root@1234";
 
        try {
            // Load the JDBC driver (for MySQL)
            Class.forName("com.mysql.cj.jdbc.Driver");
 
            // Establish the connection
            Connection connection = DriverManager.getConnection(url, username, password);
 
            // Get DatabaseMetaData
            DatabaseMetaData dbMetaData = connection.getMetaData();
 
            // Retrieve database information
            String databaseProductName = dbMetaData.getDatabaseProductName();
            String databaseProductVersion = dbMetaData.getDatabaseProductVersion();
            String driverName = dbMetaData.getDriverName();
            String driverVersion = dbMetaData.getDriverVersion();
 
            System.out.println("Database Product Name: " + databaseProductName);
            System.out.println("Database Product Version: " + databaseProductVersion);
            System.out.println("Driver Name: " + driverName);
            System.out.println("Driver Version: " + driverVersion);
 
            // List tables in the database
            ResultSet tables = dbMetaData.getTables(null, null, "%", new String[]{"TABLE"});
            System.out.println("\nTables in the database:");
            while (tables.next()) {
                String tableName = tables.getString("TABLE_NAME");
                System.out.println("Table: " + tableName);
            }
 
            // Close the resources
            tables.close();
            connection.close();
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }
}
bbbb by Maria (Unverified)
Maria (Unverified)
5:27 PM
bbbb
has context menu


has context menu





package com.jdbc;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
 
public class ResultSetMetaDataExample {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/wipro_test";
        String username = "root";
        String password = "root@1234";
 
        try {
            // Load the JDBC driver (for MySQL)
            Class.forName("com.mysql.cj.jdbc.Driver");
 
            // Establish the connection
            Connection connection = DriverManager.getConnection(url, username, password);
 
            // Prepare and execute a query
            String sql = "SELECT * FROM user";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();
 
            // Get ResultSetMetaData
            ResultSetMetaData rsMetaData = resultSet.getMetaData();
 
            // Retrieve column information
            int columnCount = rsMetaData.getColumnCount();
            System.out.println("Number of Columns: " + columnCount);
 
            for (int i = 1; i <= columnCount; i++) {
                String columnName = rsMetaData.getColumnName(i);
                String columnTypeName = rsMetaData.getColumnTypeName(i);
                int columnDisplaySize = rsMetaData.getColumnDisplaySize(i);
                boolean isNullable = rsMetaData.isNullable(i) == ResultSetMetaData.columnNullable;
 
                System.out.println("Column " + i + ": " + columnName);
                System.out.println(" - Type: " + columnTypeName);
                System.out.println(" - Display Size: " + columnDisplaySize);
                System.out.println(" - Nullable: " + isNullable);
            }
 
            // Close the resources
            resultSet.close();
            preparedStatement.close();
            connection.close();
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }
}

has context menu







package com.jdbc;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
 
public class TransactionManagementExample {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/wipro_test";
        String username = "root";
        String password = "root@1234";
 
        Connection connection = null;
 
        try {
            // Load the JDBC driver (for MySQL)
            Class.forName("com.mysql.cj.jdbc.Driver");
 
            // Establish the connection
            connection = DriverManager.getConnection(url, username, password);
 
            // Disable auto-commit mode
            connection.setAutoCommit(false);
 
            // Perform database operations
            performDatabaseOperations(connection);
 
            // Commit the transaction
            connection.commit();
        } 
        catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
            try {
                if (connection != null) {
                    // Rollback the transaction in case of an error
                    connection.rollback();
                }
            } catch (SQLException rollbackEx) {
                rollbackEx.printStackTrace();
            }
        } finally {
            try {
                if (connection != null) {
                    // Re-enable auto-commit mode and close the connection
                    connection.setAutoCommit(true);
                    connection.close();
                }
            } catch (SQLException closeEx) {
                closeEx.printStackTrace();
            }
        }
    }
 
    private static void performDatabaseOperations(Connection connection) throws SQLException {
        // Example SQL operations
        String insertUserSql = "INSERT INTO user (username, email) VALUES (?, ?)";
        String updateUserSql = "UPDATE user SET email = ? WHERE username = ?";
 
        try (PreparedStatement insertUserStmt = connection.prepareStatement(insertUserSql);
             PreparedStatement updateUserStmt = connection.prepareStatement(updateUserSql)) {
 
            // Insert a new user
            insertUserStmt.setString(1, "john_doe");
            insertUserStmt.setString(2, "john.doe@example.com");
            insertUserStmt.executeUpdate();
 
            // Update an existing user
            updateUserStmt.setString(1, "john.newemail@example.com");
            updateUserStmt.setString(2, "john_doe");
            updateUserStmt.executeUpdate();
        }
    }
}

has context menu


has context menu
