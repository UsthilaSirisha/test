import java.util.LinkedList;
import java.util.Queue;

public class ProducerConsumerExample {

    private static final int BUFFER_CAPACITY = 5;
    private static final Queue<Integer> buffer = new LinkedList<>();
    private static volatile boolean running = true; // Running state

    public static void main(String[] args) {
        Object lock = new Object();

        Thread producer = new Thread(new Producer(lock));
        Thread consumer = new Thread(new Consumer(lock));

        producer.start();
        consumer.start();

        // Optionally, stop the threads after some time
        try {
            Thread.sleep(5000); // Run for 5 seconds
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        running = false;
        producer.interrupt();
        consumer.interrupt();
    }

    static class Producer implements Runnable {
        private final Object lock;

        public Producer(Object lock) {
            this.lock = lock;
        }

        @Override
        public void run() {
            int value = 0;
            while (running) {
                synchronized (lock) {
                    while (buffer.size() == BUFFER_CAPACITY && running) {
                        try {
                            lock.wait();
                        } catch (InterruptedException e) {
                            Thread.currentThread().interrupt();
                            return;
                        }
                    }
                    if (!running) return; // Exit if not running
                    buffer.add(value);
                    System.out.println("Produced: " + value);
                    value++;
                    lock.notify(); // Notify the consumer thread
                }

                try {
                    Thread.sleep(100); // Simulate time taken to produce an item
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    return;
                }
            }
        }
    }

    static class Consumer implements Runnable {
        private final Object lock;

        public Consumer(Object lock) {
            this.lock = lock;
        }

        @Override
        public void run() {
            while (running) {
                synchronized (lock) {
                    while (buffer.isEmpty() && running) {
                        try {
                            lock.wait();
                        } catch (InterruptedException e) {
                            Thread.currentThread().interrupt();
                            return;
                        }
                    }
                    if (!running) return; // Exit if not running
                    int value = buffer.poll();
                    System.out.println("Consumed: " + value);
                    lock.notify(); // Notify the producer thread
                }

                try {
                    Thread.sleep(150); // Simulate time taken to consume an item
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    return;
                }
            }
        }
    }
}






public class ThreadLifecycleDemo {

    private static final Object lock = new Object();

    public static void main(String[] args) throws InterruptedException {
        Thread thread = new Thread(new CustomRunnable());

        System.out.println("Thread state after creation: " + thread.getState()); // NEW

        thread.start();
        System.out.println("Thread state after calling start(): " + thread.getState()); // RUNNABLE

        Thread.sleep(100); // Main thread sleeps to allow CustomRunnable to reach WAITING state
        System.out.println("Thread state after main thread sleep(): " + thread.getState());

        synchronized (lock) {
            lock.notify(); // Notify the waiting thread to move it from WAITING to RUNNABLE
        }

        thread.join(); // Main thread waits for thread to terminate
        System.out.println("Thread state after thread join(): " + thread.getState()); // TERMINATED
    }

    private static class CustomRunnable implements Runnable {
        @Override
        public void run() {
            try {
                synchronized (lock) {
                    System.out.println("Thread state after entering synchronized block: " + Thread.currentThread().getState()); // RUNNABLE
                    lock.wait(); // Thread goes into WAITING state
                    System.out.println("Thread state after wait(): " + Thread.currentThread().getState()); // WAITING
                }

                Thread.sleep(500); // Thread goes into TIMED_WAITING state
                System.out.println("Thread state after sleep(): " + Thread.currentThread().getState()); // TIMED_WAITING

                synchronized (lock) {
                    System.out.println("Thread state after re-entering synchronized block: " + Thread.currentThread().getState()); // RUNNABLE
                }

            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                System.out.println("Thread interrupted: " + e.getMessage());
            }
        }
    }
}







public class BankAccountDemo {

    public static void main(String[] args) {
        BankAccount account = new BankAccount();

        // Create and start multiple threads for deposits and withdrawals
        Thread t1 = new Thread(new DepositTask(account, 100));
        Thread t2 = new Thread(new WithdrawTask(account, 50));
        Thread t3 = new Thread(new DepositTask(account, 200));
        Thread t4 = new Thread(new WithdrawTask(account, 150));

        t1.start();
        t2.start();
        t3.start();
        t4.start();
    }
}

class BankAccount {
    private double balance;

    // Synchronized method for depositing money
    public synchronized void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println(Thread.currentThread().getName() + " deposited " + amount + ", new balance: " + balance);
        }
    }

    // Synchronized method for withdrawing money
    public synchronized void withdraw(double amount) {
        if (amount > 0 && balance >= amount) {
            balance -= amount;
            System.out.println(Thread.currentThread().getName() + " withdrew " + amount + ", new balance: " + balance);
        } else if (amount > 0 && balance < amount) {
            System.out.println(Thread.currentThread().getName() + " attempted to withdraw " + amount + ", but insufficient balance.");
        }
    }
}

class DepositTask implements Runnable {
    private final BankAccount account;
    private final double amount;

    public DepositTask(BankAccount account, double amount) {
        this.account = account;
        this.amount = amount;
    }

    @Override
    public void run() {
        account.deposit(amount);
    }
}

class WithdrawTask implements Runnable {
    private final BankAccount account;
    private final double amount;

    public WithdrawTask(BankAccount account, double amount) {
        this.account = account;
        this.amount = amount;
    }

    @Override
    public void run() {
        account.withdraw(amount);
    }
}

